#!/usr/bin/env python3
"""
Client04.py - 2507302045 - Qu·∫£n l√Ω c·∫•u h√¨nh trading bot t·ª´ xa
Ch·∫°y tr√™n Android (Termux) ƒë·ªÉ thay ƒë·ªïi c·∫•u h√¨nh database
"""

import requests
import json
import os
import sys
import time
import threading
from datetime import datetime

# C·∫•u h√¨nh
SERVER_URL = "https://2506260734c7.ngrok-free.app"  # Ngrok URL
TIMEOUT = 10


class ConfigManager:
    def __init__(self, server_url):
        self.server_url = server_url
        self.session = requests.Session()
        self.session.timeout = TIMEOUT

    def test_connection(self):
        """Test k·∫øt n·ªëi ƒë·∫øn server"""
        try:
            response = self.session.get(f"{self.server_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                return data.get('status') == 'healthy'
            return False
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False

    def get_all_config(self):
        """L·∫•y to√†n b·ªô c·∫•u h√¨nh"""
        try:
            response = self.session.get(f"{self.server_url}/api/config")
            if response.status_code == 200:
                return response.json()['config']
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def update_setting(self, key, value):
        """C·∫≠p nh·∫≠t setting"""
        try:
            data = {'key': key, 'value': value}
            response = self.session.put(f"{self.server_url}/api/config/settings", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False

    def update_strategy(self, strategy_name, strategy_type):
        """C·∫≠p nh·∫≠t strategy"""
        try:
            data = {'strategy_name': strategy_name, 'strategy_type': strategy_type}
            response = self.session.put(f"{self.server_url}/api/config/strategies", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False

    def update_strategy_config(self, strategy_name, symbol, volume, stop_loss, take_profit, timeframe):
        """C·∫≠p nh·∫≠t strategy config"""
        try:
            data = {
                'strategy_name': strategy_name,
                'symbol': symbol,
                'volume': volume,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'timeframe': timeframe
            }
            response = self.session.put(f"{self.server_url}/api/config/strategy-config", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False

    def update_test_setting(self, key, value):
        """C·∫≠p nh·∫≠t test setting"""
        try:
            data = {'key': key, 'value': value}
            response = self.session.put(f"{self.server_url}/api/config/test-settings", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False

    def refresh_bot(self):
        """G·ª≠i l·ªánh refresh bot"""
        try:
            response = self.session.post(f"{self.server_url}/api/refresh-bot")
            if response.status_code == 200:
                result = response.json()
                return True, result.get('message', 'Refresh bot th√†nh c√¥ng')
            else:
                error_data = response.json()
                return False, error_data.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')
        except Exception as e:
            return False, f"L·ªói k·∫øt n·ªëi: {e}"

    def get_mt5_account_info(self):
        """L·∫•y th√¥ng tin t√†i kho·∫£n MT5"""
        try:
            response = self.session.get(f"{self.server_url}/api/mt5-account-info")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def get_config_info(self):
        """L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ server"""
        try:
            response = self.session.get(f"{self.server_url}/api/config")
            if response.status_code == 200:
                data = response.json()
                return data.get('config', {}).get('settings', {})
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return {}

    # Firebase Management Methods
    def get_firebase_collections(self):
        """L·∫•y danh s√°ch t·∫•t c·∫£ collections trong Firebase"""
        try:
            response = self.session.get(f"{self.server_url}/api/firebase/collections")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def get_collection_stats(self, collection_name):
        """L·∫•y th·ªëng k√™ c·ªßa m·ªôt collection"""
        try:
            response = self.session.get(f"{self.server_url}/api/firebase/collection/{collection_name}/stats")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def clear_collection(self, collection_name):
        """X√≥a to√†n b·ªô documents trong m·ªôt collection"""
        try:
            response = self.session.delete(f"{self.server_url}/api/firebase/collection/{collection_name}/clear")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def clear_old_documents(self, collection_name, days):
        """X√≥a documents c≈© trong m·ªôt collection d·ª±a tr√™n s·ªë ng√†y"""
        try:
            response = self.session.delete(
                f"{self.server_url}/api/firebase/collection/{collection_name}/clear-old?days={days}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def get_collection_documents(self, collection_name, limit=50, offset=0):
        """L·∫•y danh s√°ch documents trong m·ªôt collection"""
        try:
            response = self.session.get(
                f"{self.server_url}/api/firebase/collection/{collection_name}/documents?limit={limit}&offset={offset}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def delete_document(self, collection_name, document_id):
        """X√≥a m·ªôt document c·ª• th·ªÉ"""
        try:
            response = self.session.delete(f"{self.server_url}/api/firebase/document/{collection_name}/{document_id}")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None

    def update_document(self, collection_name, document_id, data):
        """C·∫≠p nh·∫≠t m·ªôt document c·ª• th·ªÉ"""
        try:
            response = self.session.put(f"{self.server_url}/api/firebase/document/{collection_name}/{document_id}",
                                        json=data)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None


def clear_screen():
    """X√≥a m√†n h√¨nh"""
    os.system('clear' if os.name == 'posix' else 'cls')


def show_header():
    """Hi·ªÉn th·ªã header"""
    print("=" * 60)
    print("ü§ñ QU·∫¢N L√ù C·∫§U H√åNH TRADING BOT")
    print("=" * 60)
    print(f"üì° Server: {SERVER_URL}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)


def show_mt5_account_info(config_manager):
    """Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n MT5 v·ªõi c·∫≠p nh·∫≠t realtime"""
    # Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t v√≤ng l·∫∑p
    stop_updating = False
    update_count = 0

    def check_for_enter():
        """Thread ƒë·ªÉ ki·ªÉm tra ph√≠m Enter"""
        nonlocal stop_updating
        input("Nh·∫•n Enter ƒë·ªÉ d·ª´ng c·∫≠p nh·∫≠t...")
        stop_updating = True

    # B·∫Øt ƒë·∫ßu thread ki·ªÉm tra ph√≠m Enter
    enter_thread = threading.Thread(target=check_for_enter, daemon=True)
    enter_thread.start()

    print("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t realtime m·ªói 30 gi√¢y...")
    time.sleep(0.5)

    while not stop_updating:
        try:
            update_count += 1

            # X√≥a m√†n h√¨nh v√† hi·ªÉn th·ªã header
            clear_screen()
            print("=" * 60)
            print("ü§ñ QU·∫¢N L√ù C·∫§U H√åNH TRADING BOT")
            print("=" * 60)
            print(f"üì° Server: {SERVER_URL}")
            print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 60)
            print("üí∞ TH√îNG TIN T√ÄI KHO·∫¢N MT5 (REALTIME)")
            print("=" * 60)

            # Hi·ªÉn th·ªã tr·∫°ng th√°i c·∫≠p nh·∫≠t
            loading_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
            loading_char = loading_chars[update_count % len(loading_chars)]
            print(f"{loading_char} ƒêang c·∫≠p nh·∫≠t... (L·∫ßn th·ª© {update_count})")

            # L·∫•y th√¥ng tin t√†i kho·∫£n MT5
            account_info = config_manager.get_mt5_account_info()
            if not account_info:
                print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n MT5")
                print("C√≥ th·ªÉ do:")
                print("  - Bot ch∆∞a kh·ªüi ƒë·ªông")
                print("  - MT5 ch∆∞a k·∫øt n·ªëi")
                print("  - Server kh√¥ng h·ªó tr·ª£ API n√†y")
                print("\nüîÑ ƒêang th·ª≠ l·∫°i...")
                time.sleep(3)
                continue

            # Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n
            if 'account' in account_info:
                account = account_info['account']
                print("\nüìä TH√îNG TIN T√ÄI KHO·∫¢N:")
                print(f"  üÜî Login: {account.get('login', 'N/A')}")
                print(f"  üè¶ Server: {account.get('server', 'N/A')}")
                print(f"  üí∞ Balance: ${account.get('balance', 0):,.2f}")
                print(f"  üíµ Equity: ${account.get('equity', 0):,.2f}")
                print(f"  üìà Profit: ${account.get('profit', 0):,.2f}")
                print(f"  üí≥ Margin: ${account.get('margin', 0):,.2f}")
                print(f"  üîí Free Margin: ${account.get('free_margin', 0):,.2f}")
                print(f"  üìä Margin Level: {account.get('margin_level', 0):,.2f}%")
                print(f"  üéØ Currency: {account.get('currency', 'N/A')}")

            # Hi·ªÉn th·ªã c√°c l·ªánh ƒëang m·ªü
            if 'positions' in account_info:
                positions = account_info['positions']
                print(f"\nüìã L·ªÜNH ƒêANG M·ªû ({len(positions)} l·ªánh):")
                if positions:
                    print(
                        f"{'Ticket':<10} {'Symbol':<10} {'Type':<6} {'Volume':<8} {'Price':<10} {'Profit':<12} {'Comment':<15}")
                    print("-" * 80)
                    for pos in positions:
                        ticket = pos.get('ticket', 'N/A')
                        symbol = pos.get('symbol', 'N/A')
                        pos_type = 'BUY' if pos.get('type', 0) == 0 else 'SELL'
                        volume = pos.get('volume', 0)
                        price = pos.get('price_open', 0)
                        profit = pos.get('profit', 0)
                        comment = pos.get('comment', 'N/A')

                        # Th√™m m√†u s·∫Øc cho profit
                        profit_str = f"${profit:<11.2f}"
                        if profit > 0:
                            profit_str = f"üìà {profit_str}"
                        elif profit < 0:
                            profit_str = f"üìâ {profit_str}"

                        print(
                            f"{ticket:<10} {symbol:<10} {pos_type:<6} {volume:<8.2f} {price:<10.5f} {profit_str} {comment:<15}")
                else:
                    print("  Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü")

            # L·∫•y th√¥ng tin c·∫•u h√¨nh
            config_info = config_manager.get_config_info()

            # Hi·ªÉn th·ªã th·ªëng k√™
            if 'summary' in account_info:
                summary = account_info['summary']
                print(f"\nüìà TH·ªêNG K√ä:")
                print(f"  üìä T·ªïng l·ªánh m·ªü: {summary.get('total_positions', 0)}")
                print(f"  üí∞ T·ªïng profit: ${summary.get('total_profit', 0):,.2f}")
                print(f"  üìà L·ªánh c√≥ l√£i: {summary.get('profitable_positions', 0)}")
                print(f"  üìâ L·ªánh thua l·ªó: {summary.get('losing_positions', 0)}")

                # Th√™m th√¥ng tin c·∫•u h√¨nh
                if config_info:
                    print(f"\n‚öôÔ∏è C·∫§U H√åNH:")
                    balance_at_5am = float(config_info.get('balanceat5am', 0))
                    min_balance = float(config_info.get('minbalance', 0))
                    drawdown_limit = float(config_info.get('drawdown', 0))
                    daily_profit_target = float(config_info.get('dailyprofittarget', 0))
                    current_profit = account.get('profit', 0)

                    print(f"  üí∞ Balance at 5AM: ${balance_at_5am:,.2f}")
                    print(f"  üîí Min Balance: ${min_balance:,.2f}")
                    print(f"  üìâ Drawdown Limit: ${drawdown_limit:,.2f}")
                    print(f"  üéØ Daily Profit Target: ${daily_profit_target:,.2f}")
                    print(f"  üìä Profit hi·ªán t·∫°i: ${current_profit:,.2f}")

                    # T√≠nh to√°n th√™m
                    current_balance = account.get('balance', 0)
                    daily_profit = current_balance - balance_at_5am
                    drawdown_used = balance_at_5am - current_balance

                    print(f"\nüìä PH√ÇN T√çCH:")
                    print(f"  üìà Daily Profit: ${daily_profit:,.2f}")
                    print(f"  üìâ Drawdown Used: ${drawdown_used:,.2f}")

                    # Hi·ªÉn th·ªã tr·∫°ng th√°i
                    if daily_profit >= daily_profit_target:
                        print(f"  üéØ Daily Target: ‚úÖ ƒê·∫†T M·ª§C TI√äU")
                    else:
                        remaining = daily_profit_target - daily_profit
                        print(f"  üéØ Daily Target: ‚è≥ C√≤n ${remaining:,.2f}")

                    if drawdown_used >= drawdown_limit:
                        print(f"  üìâ Drawdown: ‚ö†Ô∏è V∆Ø·ª¢T GI·ªöI H·∫†N")
                    else:
                        remaining_dd = drawdown_limit - drawdown_used
                        print(f"  üìâ Drawdown: ‚úÖ C√≤n ${remaining_dd:,.2f}")

                    if current_balance < min_balance:
                        print(f"  üîí Min Balance: ‚ö†Ô∏è D∆Ø·ªöI GI·ªöI H·∫†N")
                    else:
                        print(f"  üîí Min Balance: ‚úÖ AN TO√ÄN")

            # Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t
            if 'timestamp' in account_info:
                timestamp = account_info['timestamp']
                print(f"\n‚è∞ C·∫≠p nh·∫≠t l√∫c: {timestamp}")

            print("\n" + "=" * 60)
            print(f"üîÑ C·∫≠p nh·∫≠t l·∫ßn th·ª© {update_count} - M·ªói 30 gi√¢y - Nh·∫•n Enter ƒë·ªÉ d·ª´ng")

            # Ch·ªù 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i
            time.sleep(30)

        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")
            print("üîÑ ƒêang th·ª≠ l·∫°i...")
            time.sleep(3)

    print("\n‚úÖ ƒê√£ d·ª´ng c·∫≠p nh·∫≠t realtime")
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh...")


def show_settings_management(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω Settings"""
    while True:
        clear_screen()
        show_header()

        print("‚öôÔ∏è QU·∫¢N L√ù SETTINGS")
        print("=" * 60)
        print("Ch·ª©c nƒÉng qu·∫£n l√Ω c·∫•u h√¨nh c∆° b·∫£n c·ªßa bot:")
        print("  - Xem danh s√°ch settings hi·ªán t·∫°i")
        print("  - C·∫≠p nh·∫≠t setting c·ª• th·ªÉ")
        print("  - Th√™m setting m·ªõi")
        print("-" * 60)

        # L·∫•y th√¥ng tin settings hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if config and 'settings' in config:
            settings = config['settings']
            print(f"üìä Settings hi·ªán t·∫°i ({len(settings)} items):")
            print("-" * 60)

            if settings:
                for i, (key, value) in enumerate(settings.items(), 1):
                    print(f"  {i:2d}. {key}: {value}")
            else:
                print("  Kh√¥ng c√≥ settings n√†o")

            print("-" * 60)

        print("üîß MENU SETTINGS:")
        print("  1. üìã Xem danh s√°ch Settings")
        print("  2. ‚úèÔ∏è C·∫≠p nh·∫≠t Setting")
        print("  3. ‚ûï Th√™m Setting m·ªõi")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-3): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            show_settings_list(config_manager)
        elif choice == '2':
            show_update_setting(config_manager)
        elif choice == '3':
            show_add_setting(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def show_settings_list(config_manager):
    """Hi·ªÉn th·ªã danh s√°ch settings"""
    clear_screen()
    show_header()

    print("üìã DANH S√ÅCH SETTINGS")
    print("=" * 60)

    try:
        config = config_manager.get_all_config()
        if config and 'settings' in config:
            settings = config['settings']

            if settings:
                print(f"‚úÖ T√¨m th·∫•y {len(settings)} settings:")
                print("-" * 60)

                for i, (key, value) in enumerate(settings.items(), 1):
                    print(f"  {i:2d}. {key}: {value}")

                print("-" * 60)
                print(f"üìä T·ªïng c·ªông: {len(settings)} settings")
            else:
                print("‚ùå Kh√¥ng c√≥ settings n√†o")
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin settings")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_update_setting(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng c·∫≠p nh·∫≠t setting"""
    clear_screen()
    show_header()

    print("‚úèÔ∏è C·∫¨P NH·∫¨T SETTING")
    print("=" * 60)

    # L·∫•y danh s√°ch settings
    config = config_manager.get_all_config()
    if not config or 'settings' not in config:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch settings")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    settings = config['settings']
    if not settings:
        print("‚ùå Kh√¥ng c√≥ settings n√†o ƒë·ªÉ c·∫≠p nh·∫≠t")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn setting ƒë·ªÉ c·∫≠p nh·∫≠t:")
    settings_list = list(settings.items())
    for i, (key, value) in enumerate(settings_list, 1):
        print(f"  {i:2d}. {key}: {value}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n setting: ").strip()

        # X√°c ƒë·ªãnh setting key
        setting_key = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(settings_list):
                setting_key = settings_list[choice_num - 1][0]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in settings:
                setting_key = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y setting '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Nh·∫≠p gi√° tr·ªã m·ªõi
        current_value = settings[setting_key]
        print(f"\nüìù Setting: {setting_key}")
        print(f"üíæ Gi√° tr·ªã hi·ªán t·∫°i: {current_value}")

        new_value = input("Nh·∫≠p gi√° tr·ªã m·ªõi: ").strip()
        if not new_value:
            print("‚ùå Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n c·∫≠p nh·∫≠t
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t setting '{setting_key}'?")
        print(f"T·ª´: {current_value}")
        print(f"Th√†nh: {new_value}")
        confirm = input("Nh·∫≠p 'UPDATE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "UPDATE":
            print(f"\n‚úèÔ∏è ƒêang c·∫≠p nh·∫≠t setting '{setting_key}'...")

            success = config_manager.update_setting(setting_key, new_value)
            if success:
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng setting '{setting_key}'")
            else:
                print("‚ùå L·ªói khi c·∫≠p nh·∫≠t setting")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_add_setting(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng th√™m setting m·ªõi"""
    clear_screen()
    show_header()

    print("‚ûï TH√äM SETTING M·ªöI")
    print("=" * 60)

    try:
        # Nh·∫≠p t√™n setting
        setting_key = input("Nh·∫≠p t√™n setting: ").strip()
        if not setting_key:
            print("‚ùå T√™n setting kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # Nh·∫≠p gi√° tr·ªã
        setting_value = input("Nh·∫≠p gi√° tr·ªã: ").strip()
        if not setting_value:
            print("‚ùå Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n th√™m
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m setting m·ªõi?")
        print(f"T√™n: {setting_key}")
        print(f"Gi√° tr·ªã: {setting_value}")
        confirm = input("Nh·∫≠p 'ADD' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "ADD":
            print(f"\n‚ûï ƒêang th√™m setting '{setting_key}'...")

            success = config_manager.update_setting(setting_key, setting_value)
            if success:
                print(f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng setting '{setting_key}'")
            else:
                print("‚ùå L·ªói khi th√™m setting")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c th√™m")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_strategies_management(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω Strategies"""
    while True:
        clear_screen()
        show_header()

        print("üéØ QU·∫¢N L√ù STRATEGIES")
        print("=" * 60)
        print("Ch·ª©c nƒÉng qu·∫£n l√Ω c√°c chi·∫øn l∆∞·ª£c trading:")
        print("  - Xem danh s√°ch strategies hi·ªán t·∫°i")
        print("  - C·∫≠p nh·∫≠t strategy")
        print("  - Th√™m strategy m·ªõi")
        print("-" * 60)

        # L·∫•y th√¥ng tin strategies hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if config and 'strategies' in config:
            strategies = config['strategies']
            print(f"üìä Strategies hi·ªán t·∫°i ({len(strategies)} items):")
            print("-" * 60)

            if strategies:
                for i, (name, strategy_type) in enumerate(strategies.items(), 1):
                    print(f"  {i:2d}. {name}: {strategy_type}")
            else:
                print("  Kh√¥ng c√≥ strategies n√†o")

            print("-" * 60)

        print("üîß MENU STRATEGIES:")
        print("  1. üìã Xem danh s√°ch Strategies")
        print("  2. ‚úèÔ∏è C·∫≠p nh·∫≠t Strategy")
        print("  3. ‚ûï Th√™m Strategy m·ªõi")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-3): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            show_strategies_list(config_manager)
        elif choice == '2':
            show_update_strategy(config_manager)
        elif choice == '3':
            show_add_strategy(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def show_strategies_list(config_manager):
    """Hi·ªÉn th·ªã danh s√°ch strategies"""
    clear_screen()
    show_header()

    print("üìã DANH S√ÅCH STRATEGIES")
    print("=" * 60)

    try:
        config = config_manager.get_all_config()
        if config and 'strategies' in config:
            strategies = config['strategies']

            if strategies:
                print(f"‚úÖ T√¨m th·∫•y {len(strategies)} strategies:")
                print("-" * 60)

                for i, (name, strategy_type) in enumerate(strategies.items(), 1):
                    print(f"  {i:2d}. {name}: {strategy_type}")

                print("-" * 60)
                print(f"üìä T·ªïng c·ªông: {len(strategies)} strategies")
            else:
                print("‚ùå Kh√¥ng c√≥ strategies n√†o")
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin strategies")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_update_strategy(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng c·∫≠p nh·∫≠t strategy"""
    clear_screen()
    show_header()

    print("‚úèÔ∏è C·∫¨P NH·∫¨T STRATEGY")
    print("=" * 60)

    # L·∫•y danh s√°ch strategies
    config = config_manager.get_all_config()
    if not config or 'strategies' not in config:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch strategies")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    strategies = config['strategies']
    if not strategies:
        print("‚ùå Kh√¥ng c√≥ strategies n√†o ƒë·ªÉ c·∫≠p nh·∫≠t")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn strategy ƒë·ªÉ c·∫≠p nh·∫≠t:")
    strategies_list = list(strategies.items())
    for i, (name, strategy_type) in enumerate(strategies_list, 1):
        print(f"  {i:2d}. {name}: {strategy_type}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n strategy: ").strip()

        # X√°c ƒë·ªãnh strategy name
        strategy_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(strategies_list):
                strategy_name = strategies_list[choice_num - 1][0]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in strategies:
                strategy_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y strategy '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Nh·∫≠p strategy type m·ªõi
        current_type = strategies[strategy_name]
        print(f"\nüìù Strategy: {strategy_name}")
        print(f"üíæ Lo·∫°i hi·ªán t·∫°i: {current_type}")

        print("\nüìã C√°c lo·∫°i strategy c√≥ s·∫µn:")
        print("  - scalping")
        print("  - swing")
        print("  - trend")
        print("  - mean_reversion")
        print("  - breakout")

        new_type = input("Nh·∫≠p lo·∫°i strategy m·ªõi: ").strip()
        if not new_type:
            print("‚ùå Lo·∫°i strategy kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n c·∫≠p nh·∫≠t
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t strategy '{strategy_name}'?")
        print(f"T·ª´: {current_type}")
        print(f"Th√†nh: {new_type}")
        confirm = input("Nh·∫≠p 'UPDATE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "UPDATE":
            print(f"\n‚úèÔ∏è ƒêang c·∫≠p nh·∫≠t strategy '{strategy_name}'...")

            success = config_manager.update_strategy(strategy_name, new_type)
            if success:
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng strategy '{strategy_name}'")
            else:
                print("‚ùå L·ªói khi c·∫≠p nh·∫≠t strategy")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_add_strategy(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng th√™m strategy m·ªõi"""
    clear_screen()
    show_header()

    print("‚ûï TH√äM STRATEGY M·ªöI")
    print("=" * 60)

    try:
        # Nh·∫≠p t√™n strategy
        strategy_name = input("Nh·∫≠p t√™n strategy: ").strip()
        if not strategy_name:
            print("‚ùå T√™n strategy kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # Nh·∫≠p lo·∫°i strategy
        print("\nüìã C√°c lo·∫°i strategy c√≥ s·∫µn:")
        print("  - scalping")
        print("  - swing")
        print("  - trend")
        print("  - mean_reversion")
        print("  - breakout")

        strategy_type = input("Nh·∫≠p lo·∫°i strategy: ").strip()
        if not strategy_type:
            print("‚ùå Lo·∫°i strategy kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n th√™m
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m strategy m·ªõi?")
        print(f"T√™n: {strategy_name}")
        print(f"Lo·∫°i: {strategy_type}")
        confirm = input("Nh·∫≠p 'ADD' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "ADD":
            print(f"\n‚ûï ƒêang th√™m strategy '{strategy_name}'...")

            success = config_manager.update_strategy(strategy_name, strategy_type)
            if success:
                print(f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng strategy '{strategy_name}'")
            else:
                print("‚ùå L·ªói khi th√™m strategy")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c th√™m")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_strategy_config_management(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω Strategy Config"""
    while True:
        clear_screen()
        show_header()

        print("‚öôÔ∏è QU·∫¢N L√ù STRATEGY CONFIG")
        print("=" * 60)
        print("Ch·ª©c nƒÉng qu·∫£n l√Ω c·∫•u h√¨nh chi ti·∫øt cho t·ª´ng strategy:")
        print("  - Xem danh s√°ch strategy configs")
        print("  - C·∫≠p nh·∫≠t strategy config")
        print("  - Th√™m strategy config m·ªõi")
        print("-" * 60)

        # L·∫•y th√¥ng tin strategy configs hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if config and 'strategy_config' in config:
            strategy_configs = config['strategy_config']
            print(f"üìä Strategy Configs hi·ªán t·∫°i ({len(strategy_configs)} items):")
            print("-" * 60)

            if strategy_configs:
                for i, (name, config_data) in enumerate(strategy_configs.items(), 1):
                    symbol = config_data.get('symbol', 'N/A')
                    volume = config_data.get('volume', 'N/A')
                    print(f"  {i:2d}. {name} - {symbol} (Vol: {volume})")
            else:
                print("  Kh√¥ng c√≥ strategy configs n√†o")

            print("-" * 60)

        print("üîß MENU STRATEGY CONFIG:")
        print("  1. üìã Xem danh s√°ch Strategy Configs")
        print("  2. ‚úèÔ∏è C·∫≠p nh·∫≠t Strategy Config")
        print("  3. ‚ûï Th√™m Strategy Config m·ªõi")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-3): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            show_strategy_configs_list(config_manager)
        elif choice == '2':
            show_update_strategy_config(config_manager)
        elif choice == '3':
            show_add_strategy_config(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def show_strategy_configs_list(config_manager):
    """Hi·ªÉn th·ªã danh s√°ch strategy configs"""
    clear_screen()
    show_header()

    print("üìã DANH S√ÅCH STRATEGY CONFIGS")
    print("=" * 60)

    try:
        config = config_manager.get_all_config()
        if config and 'strategy_config' in config:
            strategy_configs = config['strategy_config']

            if strategy_configs:
                print(f"‚úÖ T√¨m th·∫•y {len(strategy_configs)} strategy configs:")
                print("-" * 80)
                print(f"{'T√™n':<20} {'Symbol':<10} {'Volume':<8} {'SL':<8} {'TP':<8} {'TF':<10}")
                print("-" * 80)

                for name, config_data in strategy_configs.items():
                    symbol = config_data.get('symbol', 'N/A')
                    volume = config_data.get('volume', 'N/A')
                    stop_loss = config_data.get('stop_loss', 'N/A')
                    take_profit = config_data.get('take_profit', 'N/A')
                    timeframe = config_data.get('timeframe', 'N/A')

                    print(f"{name:<20} {symbol:<10} {volume:<8} {stop_loss:<8} {take_profit:<8} {timeframe:<10}")

                print("-" * 80)
                print(f"üìä T·ªïng c·ªông: {len(strategy_configs)} strategy configs")
            else:
                print("‚ùå Kh√¥ng c√≥ strategy configs n√†o")
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin strategy configs")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_update_strategy_config(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng c·∫≠p nh·∫≠t strategy config"""
    clear_screen()
    show_header()

    print("‚úèÔ∏è C·∫¨P NH·∫¨T STRATEGY CONFIG")
    print("=" * 60)

    # L·∫•y danh s√°ch strategy configs
    config = config_manager.get_all_config()
    if not config or 'strategy_config' not in config:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch strategy configs")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    strategy_configs = config['strategy_config']
    if not strategy_configs:
        print("‚ùå Kh√¥ng c√≥ strategy configs n√†o ƒë·ªÉ c·∫≠p nh·∫≠t")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn strategy config ƒë·ªÉ c·∫≠p nh·∫≠t:")
    configs_list = list(strategy_configs.items())
    for i, (name, config_data) in enumerate(configs_list, 1):
        symbol = config_data.get('symbol', 'N/A')
        volume = config_data.get('volume', 'N/A')
        print(f"  {i:2d}. {name} - {symbol} (Vol: {volume})")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n strategy: ").strip()

        # X√°c ƒë·ªãnh strategy name
        strategy_name = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(configs_list):
                strategy_name = configs_list[choice_num - 1][0]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in strategy_configs:
                strategy_name = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y strategy '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Hi·ªÉn th·ªã th√¥ng tin hi·ªán t·∫°i
        current_config = strategy_configs[strategy_name]
        print(f"\nüìù Strategy: {strategy_name}")
        print(f"üíæ C·∫•u h√¨nh hi·ªán t·∫°i:")
        print(f"  - Symbol: {current_config.get('symbol', 'N/A')}")
        print(f"  - Volume: {current_config.get('volume', 'N/A')}")
        print(f"  - Stop Loss: {current_config.get('stop_loss', 'N/A')}")
        print(f"  - Take Profit: {current_config.get('take_profit', 'N/A')}")
        print(f"  - Timeframe: {current_config.get('timeframe', 'N/A')}")

        # Nh·∫≠p th√¥ng tin m·ªõi
        print(f"\nüìù Nh·∫≠p th√¥ng tin m·ªõi:")
        symbol = input("Symbol (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip() or current_config.get('symbol', '')
        volume = input("Volume (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip() or current_config.get('volume', '')
        stop_loss = input("Stop Loss (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip() or current_config.get('stop_loss', '')
        take_profit = input("Take Profit (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip() or current_config.get('take_profit', '')
        timeframe = input("Timeframe (Enter ƒë·ªÉ gi·ªØ nguy√™n): ").strip() or current_config.get('timeframe', '')

        # X√°c nh·∫≠n c·∫≠p nh·∫≠t
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t strategy config '{strategy_name}'?")
        print(f"Symbol: {symbol}")
        print(f"Volume: {volume}")
        print(f"Stop Loss: {stop_loss}")
        print(f"Take Profit: {take_profit}")
        print(f"Timeframe: {timeframe}")
        confirm = input("Nh·∫≠p 'UPDATE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "UPDATE":
            print(f"\n‚úèÔ∏è ƒêang c·∫≠p nh·∫≠t strategy config '{strategy_name}'...")

            success = config_manager.update_strategy_config(strategy_name, symbol, volume, stop_loss, take_profit,
                                                            timeframe)
            if success:
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng strategy config '{strategy_name}'")
            else:
                print("‚ùå L·ªói khi c·∫≠p nh·∫≠t strategy config")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_add_strategy_config(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng th√™m strategy config m·ªõi"""
    clear_screen()
    show_header()

    print("‚ûï TH√äM STRATEGY CONFIG M·ªöI")
    print("=" * 60)

    try:
        # Nh·∫≠p th√¥ng tin strategy config
        strategy_name = input("Nh·∫≠p t√™n strategy: ").strip()
        if not strategy_name:
            print("‚ùå T√™n strategy kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        symbol = input("Nh·∫≠p symbol (VD: XAUUSD): ").strip()
        if not symbol:
            print("‚ùå Symbol kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        volume = input("Nh·∫≠p volume (VD: 0.01): ").strip()
        if not volume:
            print("‚ùå Volume kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        stop_loss = input("Nh·∫≠p stop loss (VD: 50): ").strip()
        if not stop_loss:
            print("‚ùå Stop loss kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        take_profit = input("Nh·∫≠p take profit (VD: 100): ").strip()
        if not take_profit:
            print("‚ùå Take profit kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        timeframe = input("Nh·∫≠p timeframe (VD: M5): ").strip()
        if not timeframe:
            print("‚ùå Timeframe kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n th√™m
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m strategy config m·ªõi?")
        print(f"T√™n: {strategy_name}")
        print(f"Symbol: {symbol}")
        print(f"Volume: {volume}")
        print(f"Stop Loss: {stop_loss}")
        print(f"Take Profit: {take_profit}")
        print(f"Timeframe: {timeframe}")
        confirm = input("Nh·∫≠p 'ADD' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "ADD":
            print(f"\n‚ûï ƒêang th√™m strategy config '{strategy_name}'...")

            success = config_manager.update_strategy_config(strategy_name, symbol, volume, stop_loss, take_profit,
                                                            timeframe)
            if success:
                print(f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng strategy config '{strategy_name}'")
            else:
                print("‚ùå L·ªói khi th√™m strategy config")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c th√™m")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_test_settings_management(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω Test Settings"""
    while True:
        clear_screen()
        show_header()

        print("üß™ QU·∫¢N L√ù TEST SETTINGS")
        print("=" * 60)
        print("Ch·ª©c nƒÉng qu·∫£n l√Ω c·∫•u h√¨nh test v√† debug:")
        print("  - Xem danh s√°ch test settings hi·ªán t·∫°i")
        print("  - C·∫≠p nh·∫≠t test setting")
        print("  - Th√™m test setting m·ªõi")
        print("-" * 60)

        # L·∫•y th√¥ng tin test settings hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if config and 'test_settings' in config:
            test_settings = config['test_settings']
            print(f"üìä Test Settings hi·ªán t·∫°i ({len(test_settings)} items):")
            print("-" * 60)

            if test_settings:
                for i, (key, value) in enumerate(test_settings.items(), 1):
                    print(f"  {i:2d}. {key}: {value}")
            else:
                print("  Kh√¥ng c√≥ test settings n√†o")

            print("-" * 60)

        print("üîß MENU TEST SETTINGS:")
        print("  1. üìã Xem danh s√°ch Test Settings")
        print("  2. ‚úèÔ∏è C·∫≠p nh·∫≠t Test Setting")
        print("  3. ‚ûï Th√™m Test Setting m·ªõi")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-3): ").strip()

        if choice == '0':
            break
        elif choice == '1':
            show_test_settings_list(config_manager)
        elif choice == '2':
            show_update_test_setting(config_manager)
        elif choice == '3':
            show_add_test_setting(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def show_test_settings_list(config_manager):
    """Hi·ªÉn th·ªã danh s√°ch test settings"""
    clear_screen()
    show_header()

    print("üìã DANH S√ÅCH TEST SETTINGS")
    print("=" * 60)

    try:
        config = config_manager.get_all_config()
        if config and 'test_settings' in config:
            test_settings = config['test_settings']

            if test_settings:
                print(f"‚úÖ T√¨m th·∫•y {len(test_settings)} test settings:")
                print("-" * 60)

                for i, (key, value) in enumerate(test_settings.items(), 1):
                    print(f"  {i:2d}. {key}: {value}")

                print("-" * 60)
                print(f"üìä T·ªïng c·ªông: {len(test_settings)} test settings")
            else:
                print("‚ùå Kh√¥ng c√≥ test settings n√†o")
        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin test settings")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_update_test_setting(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng c·∫≠p nh·∫≠t test setting"""
    clear_screen()
    show_header()

    print("‚úèÔ∏è C·∫¨P NH·∫¨T TEST SETTING")
    print("=" * 60)

    # L·∫•y danh s√°ch test settings
    config = config_manager.get_all_config()
    if not config or 'test_settings' not in config:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch test settings")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    test_settings = config['test_settings']
    if not test_settings:
        print("‚ùå Kh√¥ng c√≥ test settings n√†o ƒë·ªÉ c·∫≠p nh·∫≠t")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return

    print("üìã Ch·ªçn test setting ƒë·ªÉ c·∫≠p nh·∫≠t:")
    settings_list = list(test_settings.items())
    for i, (key, value) in enumerate(settings_list, 1):
        print(f"  {i:2d}. {key}: {value}")

    print("-" * 60)

    try:
        choice = input("Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n test setting: ").strip()

        # X√°c ƒë·ªãnh setting key
        setting_key = None
        if choice.isdigit():
            choice_num = int(choice)
            if 1 <= choice_num <= len(settings_list):
                setting_key = settings_list[choice_num - 1][0]
            else:
                print("‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return
        else:
            if choice in test_settings:
                setting_key = choice
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y test setting '{choice}'")
                input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
                return

        # Nh·∫≠p gi√° tr·ªã m·ªõi
        current_value = test_settings[setting_key]
        print(f"\nüìù Test Setting: {setting_key}")
        print(f"üíæ Gi√° tr·ªã hi·ªán t·∫°i: {current_value}")

        new_value = input("Nh·∫≠p gi√° tr·ªã m·ªõi: ").strip()
        if not new_value:
            print("‚ùå Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n c·∫≠p nh·∫≠t
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t test setting '{setting_key}'?")
        print(f"T·ª´: {current_value}")
        print(f"Th√†nh: {new_value}")
        confirm = input("Nh·∫≠p 'UPDATE' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "UPDATE":
            print(f"\n‚úèÔ∏è ƒêang c·∫≠p nh·∫≠t test setting '{setting_key}'...")

            success = config_manager.update_test_setting(setting_key, new_value)
            if success:
                print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng test setting '{setting_key}'")
            else:
                print("‚ùå L·ªói khi c·∫≠p nh·∫≠t test setting")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_add_test_setting(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng th√™m test setting m·ªõi"""
    clear_screen()
    show_header()

    print("‚ûï TH√äM TEST SETTING M·ªöI")
    print("=" * 60)

    try:
        # Nh·∫≠p t√™n test setting
        setting_key = input("Nh·∫≠p t√™n test setting: ").strip()
        if not setting_key:
            print("‚ùå T√™n test setting kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # Nh·∫≠p gi√° tr·ªã
        setting_value = input("Nh·∫≠p gi√° tr·ªã: ").strip()
        if not setting_value:
            print("‚ùå Gi√° tr·ªã kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return

        # X√°c nh·∫≠n th√™m
        print(f"\n‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m test setting m·ªõi?")
        print(f"T√™n: {setting_key}")
        print(f"Gi√° tr·ªã: {setting_value}")
        confirm = input("Nh·∫≠p 'ADD' ƒë·ªÉ x√°c nh·∫≠n: ").strip()

        if confirm == "ADD":
            print(f"\n‚ûï ƒêang th√™m test setting '{setting_key}'...")

            success = config_manager.update_test_setting(setting_key, setting_value)
            if success:
                print(f"‚úÖ ƒê√£ th√™m th√†nh c√¥ng test setting '{setting_key}'")
            else:
                print("‚ùå L·ªói khi th√™m test setting")
        else:
            print("‚ùå ƒê√£ h·ªßy thao t√°c th√™m")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_full_config(config_manager):
    """Hi·ªÉn th·ªã to√†n b·ªô c·∫•u h√¨nh"""
    clear_screen()
    show_header()

    print("üìä TO√ÄN B·ªò C·∫§U H√åNH")
    print("=" * 60)

    try:
        config = config_manager.get_all_config()
        if config:
            print("‚úÖ L·∫•y c·∫•u h√¨nh th√†nh c√¥ng!")
            print("=" * 60)

            # Hi·ªÉn th·ªã Settings
            if 'settings' in config and config['settings']:
                print("‚öôÔ∏è SETTINGS:")
                print("-" * 40)
                for key, value in config['settings'].items():
                    print(f"  {key}: {value}")
                print()

            # Hi·ªÉn th·ªã Strategies
            if 'strategies' in config and config['strategies']:
                print("üéØ STRATEGIES:")
                print("-" * 40)
                for name, strategy_type in config['strategies'].items():
                    print(f"  {name}: {strategy_type}")
                print()

            # Hi·ªÉn th·ªã Strategy Configs
            if 'strategy_config' in config and config['strategy_config']:
                print("‚öôÔ∏è STRATEGY CONFIGS:")
                print("-" * 40)
                for name, config_data in config['strategy_config'].items():
                    print(f"  {name}:")
                    for key, value in config_data.items():
                        print(f"    {key}: {value}")
                    print()

            # Hi·ªÉn th·ªã Test Settings
            if 'test_settings' in config and config['test_settings']:
                print("üß™ TEST SETTINGS:")
                print("-" * 40)
                for key, value in config['test_settings'].items():
                    print(f"  {key}: {value}")
                print()

            # Th·ªëng k√™ t·ªïng quan
            print("üìà TH·ªêNG K√ä T·ªîNG QUAN:")
            print("-" * 40)
            print(f"  Settings: {len(config.get('settings', {}))} items")
            print(f"  Strategies: {len(config.get('strategies', {}))} items")
            print(f"  Strategy Configs: {len(config.get('strategy_config', {}))} items")
            print(f"  Test Settings: {len(config.get('test_settings', {}))} items")

        else:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")


def show_main_menu(config_manager):
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    while True:
        clear_screen()
        show_header()

        # Test k·∫øt n·ªëi
        if not config_manager.test_connection():
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!")
            print("H√£y ki·ªÉm tra:")
            print("  - Server c√≥ ƒëang ch·∫°y kh√¥ng?")
            print("  - IP address c√≥ ƒë√∫ng kh√¥ng?")
            print("  - Port 5000 c√≥ m·ªü kh√¥ng?")
            print(f"  - URL hi·ªán t·∫°i: {SERVER_URL}")
            print("\nNh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...")
            input()
            continue

        print("‚úÖ K·∫øt n·ªëi server th√†nh c√¥ng!")

        # L·∫•y th√¥ng tin c·∫•u h√¨nh
        config = config_manager.get_all_config()
        if config:
            print(f"üìä Th·ªëng k√™:")
            print(f"  - Settings: {len(config['settings'])} items")
            print(f"  - Strategies: {len(config['strategies'])} items")
            print(f"  - Strategy Configs: {len(config['strategy_config'])} items")
            print(f"  - Test Settings: {len(config['test_settings'])} items")

            # Hi·ªÉn th·ªã tr·∫°ng th√°i refresh bot
            test_settings = config['test_settings']
            refresh_status = test_settings.get('refresh_bot', 'N/A')
            print(f"  - Refresh Bot: {refresh_status}")

        print("\nüîß MENU CH√çNH:")
        print("  1. ‚öôÔ∏è  Qu·∫£n l√Ω Settings")
        print("  2. üéØ Qu·∫£n l√Ω Strategies")
        print("  3. ‚öôÔ∏è  Qu·∫£n l√Ω Strategy Config")
        print("  4. üß™ Qu·∫£n l√Ω Test Settings")
        print("  5. üîÑ Refresh Bot")
        print("  6. üìä Xem to√†n b·ªô c·∫•u h√¨nh")
        print("  7. üí∞ Th√¥ng tin t√†i kho·∫£n MT5")
        print("  8.  Qu·∫£n l√Ω Firebase")
        print("  0. üö™ Tho√°t")
        print("-" * 60)

        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-8): ").strip()

        if choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        elif choice == '1':
            show_settings_management(config_manager)
        elif choice == '2':
            show_strategies_management(config_manager)
        elif choice == '3':
            show_strategy_config_management(config_manager)
        elif choice == '4':
            show_test_settings_management(config_manager)
        elif choice == '5':
            show_refresh_bot(config_manager)
        elif choice == '6':
            show_full_config(config_manager)
        elif choice == '7':
            show_mt5_account_info(config_manager)
        elif choice == '8':
            show_firebase_management(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")


def main():
    """H√†m ch√≠nh"""
    global SERVER_URL

    print("üöÄ KH·ªûI ƒê·ªòNG CLIENT04.PY")
    print("=" * 60)

    # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
    print("üì° Ki·ªÉm tra k·∫øt n·ªëi...")

    config_manager = ConfigManager(SERVER_URL)

    if not config_manager.test_connection():
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {SERVER_URL}")
        print("\nüîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        print("1. ƒê·∫£m b·∫£o server04.py ƒëang ch·∫°y tr√™n m√°y ch·ªß")
        print("2. Ki·ªÉm tra IP address trong file client04.py")
        print("3. ƒê·∫£m b·∫£o port 5000 ƒë∆∞·ª£c m·ªü")
        print("4. Ki·ªÉm tra firewall")
        print(f"\nIP hi·ªán t·∫°i: {SERVER_URL}")
        change_ip = input("B·∫°n c√≥ mu·ªën thay ƒë·ªïi IP kh√¥ng? (y/n): ").lower()
        if change_ip == 'y':
            new_ip = input("Nh·∫≠p IP m·ªõi: ").strip()
            if new_ip:
                SERVER_URL = f"http://{new_ip}:5000"
                config_manager = ConfigManager(SERVER_URL)
                print(f"‚úÖ ƒê√£ thay ƒë·ªïi IP th√†nh: {SERVER_URL}")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    # Hi·ªÉn th·ªã menu ch√≠nh
    show_main_menu(config_manager)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã gi√°n ƒëo·∫°n")
        print("üëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        print("H√£y ki·ªÉm tra l·∫°i v√† th·ª≠ l·∫°i") 